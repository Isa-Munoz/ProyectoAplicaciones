@page "/responsables"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using ResponsableModel = FrontendBlazorApi.Models.Responsable
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Responsables</PageTitle>

<h3>Gestión de Responsables</h3>

@* ------------- BARRA DE ACCIONES GENERALES ------------- *@
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarResponsables">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@* ------------- MENSAJES DE ESTADO ------------- *@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- *@
<h4>Formulario de Responsable</h4>

<EditForm Model="responsableActual" OnValidSubmit="GuardarSegunEstado" FormName="ResponsableForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">Id</label>
            <InputNumber class="form-control" @bind-Value="responsableActual.Id" />
        </div>
        
        @* CAMPO AÑADIDO: TipoResponsableId *@
        <div class="col-md-3">
            <label class="form-label">Tipo Responsable Id (FK)</label>
            <InputNumber class="form-control" @bind-Value="responsableActual.TipoResponsableId" />
        </div>
        
        @* CAMPO MANTENIDO: UsuarioId (Clave Foránea) *@
        <div class="col-md-2">
            <label class="form-label">Usuario Id (FK)</label>
            <InputNumber class="form-control" @bind-Value="responsableActual.UsuarioId" />
        </div>

        @* CAMPO MANTENIDO: Nombre *@
        <div class="col-md-5">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="responsableActual.Nombre" />
        </div>
        
        @* CAMPOS ELIMINADOS: Ruta y Fecha (del modelo Archivo) *@

    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarResponsable" disabled="@(!existeResponsable)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarResponsable" disabled="@(!existeResponsable)">Eliminar</button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- *@
@if (cargando)
{
    <p><em>Cargando responsables...</em></p>
}
else if (listaResponsables.Count == 0)
{
    <p>No hay responsables disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Tipo Responsable Id</th> @* NUEVA COLUMNA *@
                <th>Usuario Id</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in listaResponsables) @* CAMBIO: listaResponsables, r *@
            {
                <tr>
                    <td>@r.Id</td>
                    <td>@r.TipoResponsableId</td> @* NUEVO CAMPO *@
                    <td>@r.UsuarioId</td>
                    <td>@r.Nombre</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(r))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE (Adaptadas a Responsable)
    // =============================================================================
    private List<ResponsableModel> listaResponsables = new(); 

    [SupplyParameterFromForm]
    private ResponsableModel responsableActual { get; set; } = new(); 

    private bool existeResponsable = false; // CAMBIO: existeResponsable
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/responsable"; // CAMBIO: urlBaseApi a "api/responsable"


    // =============================================================================
    // CICLO DE VIDA
    // =============================================================================
    protected override async Task OnInitializedAsync()
    {
        await CargarResponsables();
    }

    // =============================================================================
    // CRUDL (Adaptado a Responsable)
    // =============================================================================
    private async Task CargarResponsables()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var httpResponse = await cliente.GetAsync(urlBaseApi); 

            if (httpResponse.IsSuccessStatusCode)
            {
                if (httpResponse.Content.Headers.ContentLength > 0)
                {
                    var respuesta = await httpResponse.Content.ReadFromJsonAsync<RespuestaApi<List<ResponsableModel>>>();
                    listaResponsables = respuesta?.Datos ?? new List<ResponsableModel>(); // CAMBIO: ResponsableModel, listaResponsables
                    mensaje = $"Se cargaron {listaResponsables.Count} responsable(s).";
                }
                else
                {
                    listaResponsables = new List<ResponsableModel>();
                    mensaje = "La API respondió OK, pero sin contenido (se asumió lista vacía).";
                }

                claseAviso = "alert alert-success";
            }
            else
            {
                var detalle = await httpResponse.Content.ReadAsStringAsync();
                mensaje = $"Error de la API ({(int)httpResponse.StatusCode}): No se pudo cargar. Detalle: {detalle.Substring(0, Math.Min(detalle.Length, 100))}...";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al listar responsables: {error.Message}. Verifique la conexión con la API.";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        if (responsableActual.Id <= 0) // CAMBIO: responsableActual.Id
        {
            mensaje = "Debe indicar un Id válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}"; // CAMBIO: responsableActual.Id
            
            // CAMBIO: ResponsableModel
            RespuestaApi<List<ResponsableModel>>? respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<ResponsableModel>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                // CAMBIO: Asignar propiedades de Responsable
                responsableActual = new ResponsableModel
                {
                    Id = encontrado.Id,
                    TipoResponsableId = encontrado.TipoResponsableId, // NUEVO CAMPO
                    UsuarioId = encontrado.UsuarioId,
                    Nombre = encontrado.Nombre
                    // Se omiten Ruta y Fecha
                };
                existeResponsable = true; // CAMBIO: existeResponsable
                textoBotonGuardar = "Actualizar";
                mensaje = "Responsable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeResponsable = false; // CAMBIO: existeResponsable
                textoBotonGuardar = "Crear";
                mensaje = "Responsable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            existeResponsable = false; // CAMBIO: existeResponsable
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeResponsable) // CAMBIO: existeResponsable
            await ActualizarResponsable();
        else
            await CrearResponsable();
    }

    private async Task CrearResponsable() // CAMBIO: CrearResponsable
    {
        LimpiarMensajes();

        // CAMBIO: Crear DTO con propiedades de Responsable. Usando IdTipoResponsable
        // para coincidir con la convención de tu API y el JsonPropertyName.
        var datosParaCrear = new
        {
            IdTipoResponsable = responsableActual.TipoResponsableId, // NUEVO CAMPO (FK)
            IdUsuario = responsableActual.UsuarioId, // CAMPO MANTENIDO (FK)
            Nombre = responsableActual.Nombre
            // Se omiten Id, Ruta, Fecha
        };

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, datosParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable creado correctamente.";
                claseAviso = "alert alert-success";

                await CargarResponsables(); // CAMBIO: CargarResponsables

                responsableActual = new ResponsableModel(); // CAMBIO: ResponsableModel
                existeResponsable = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarResponsable() // CAMBIO: ActualizarResponsable
    {
        LimpiarMensajes();

        if (responsableActual.Id <= 0) // CAMBIO: responsableActual.Id
        {
            mensaje = "Debe indicar el Id para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        // 1. Se crea objeto DTO con propiedades de Responsable
        var datosParaActualizar = new
        {
            IdTipoResponsable = responsableActual.TipoResponsableId, // NUEVO CAMPO (FK)
            IdUsuario = responsableActual.UsuarioId, // CAMPO MANTENIDO (FK)
            Nombre = responsableActual.Nombre
            // Se omiten Id, Ruta, Fecha
        };

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}"; // CAMBIO: responsableActual.Id

            // 2. ENVIAMOS EL OBJETO DTO (SIN EL ID)
            var respuesta = await cliente.PutAsJsonAsync(ruta, datosParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable actualizado correctamente.";
                claseAviso = "alert alert-success";

                await CargarResponsables(); // CAMBIO: CargarResponsables

                existeResponsable = true;
                textoBotonGuardar = "Actualizar";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarResponsable() // CAMBIO: EliminarResponsable
    {
        LimpiarMensajes();

        if (responsableActual.Id <= 0) // CAMBIO: responsableActual.Id
        {
            mensaje = "Debe indicar el Id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}"; // CAMBIO: responsableActual.Id
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable eliminado correctamente.";
                claseAviso = "alert alert-success";

                await CargarResponsables(); // CAMBIO: CargarResponsables

                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // AUXILIARES
    // =============================================================================
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiUsuarios");
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API de Responsables verificada."; // CAMBIO: Mensaje
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(ResponsableModel r) // CAMBIO: ResponsableModel, r
    {
        responsableActual = new ResponsableModel() // CAMBIO: ResponsableModel
        {
            Id = r.Id,
            TipoResponsableId = r.TipoResponsableId, // NUEVO CAMPO
            UsuarioId = r.UsuarioId,
            Nombre = r.Nombre
            // Se omiten Ruta y Fecha
        };

        existeResponsable = true; // CAMBIO: existeResponsable
        textoBotonGuardar = "Actualizar";
        mensaje = "Responsable seleccionado desde el listado."; // CAMBIO: Mensaje
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        responsableActual = new ResponsableModel(); // CAMBIO: ResponsableModel
        existeResponsable = false; // CAMBIO: existeResponsable
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}