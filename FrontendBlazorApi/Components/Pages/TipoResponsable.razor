@page "/tiporesponsables"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using TipoResponsableModel = FrontendBlazorApi.Models.TipoResponsable
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Tipos de Responsables</PageTitle>

<h3>Gestión de Tipos de Responsables</h3>

@* ------------- BARRA DE ACCIONES GENERALES ------------- *@
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTipoResponsables">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@* ------------- MENSAJES DE Responsable ------------- *@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- *@
<h4>Formulario de Tipos de Responsable</h4>

<EditForm Model="tiporesponsableActual" OnValidSubmit="GuardarSegunTipoResponsable" FormName="TipoResponsableForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">Id</label>
            <InputNumber class="form-control" @bind-Value="tiporesponsableActual.Id" />
        </div>

        <div class="col-md-7">
            <label class="form-label">Titulo</label>
            <InputText class="form-control" @bind-Value="tiporesponsableActual.Titulo" />
        </div>

        <div class="col-md-12">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control" @bind-Value="tiporesponsableActual.Descripcion" rows="3" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarTipoResponsable" disabled="@(!existeTipoResponsable)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarTipoResponsable" disabled="@(!existeTipoResponsable)">Eliminar</button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- *@
@if (cargando)
{
    <p><em>Cargando tipos de responsables...</em></p>
}
else if (listaTipoResponsables.Count == 0)
{
    <p>No hay tipos de Responsables disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titulo</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in listaTipoResponsables)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.Titulo</td>
                    <td>@u.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(u))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================
    private List<TipoResponsableModel> listaTipoResponsables = new();

    [SupplyParameterFromForm]
    private TipoResponsableModel tiporesponsableActual { get; set; } = new();

    private bool existeTipoResponsable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    // Ruta base para TipoResponsables
    private const string urlBaseApi = "api/tiporesponsable";

    // =============================================================================
    // CICLO DE VIDA
    // =============================================================================
    protected override async Task OnInitializedAsync()
    {
        await CargarTipoResponsables();
    }

    // =============================================================================
    // CRUDL
    // =============================================================================
    private async Task CargarTipoResponsables()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsableModel>>>(urlBaseApi);
            listaTipoResponsables = respuesta?.Datos ?? new List<TipoResponsableModel>();

            mensaje = $"Se cargaron {listaTipoResponsables.Count} tipo(s) de Responsable(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al listar tipos de responsables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        if (tiporesponsableActual.Id <= 0)
        {
            mensaje = "Debe indicar un Id válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
            var ruta = $"{urlBaseApi}/id/{tiporesponsableActual.Id}";
            RespuestaApi<List<TipoResponsableModel>>? respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsableModel>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                tiporesponsableActual = new TipoResponsableModel
                {
                    Id = encontrado.Id,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                };
                existeTipoResponsable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Tipo de Responsable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeTipoResponsable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Tipo de Responsable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            existeTipoResponsable = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar el Tipo de Responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunTipoResponsable()
    {
        if (existeTipoResponsable)
            await ActualizarTipoResponsable();
        else
            await CrearTipoResponsable();
    }

    private async Task CrearTipoResponsable()
{
    LimpiarMensajes();


    var datosParaCrear = new 
    {
        Titulo = tiporesponsableActual.Titulo,
        Descripcion = tiporesponsableActual.Descripcion,
    };

    try
    {
        var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
        var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, datosParaCrear);

        if (respuesta.IsSuccessStatusCode)
        {
            mensaje = "Tipo de Responsable creado correctamente.";
            claseAviso = "alert alert-success";

            await CargarTipoResponsables();

            tiporesponsableActual = new TipoResponsableModel();
            existeTipoResponsable = false;
            textoBotonGuardar = "Crear";
        }
        else
        {
            var detalle = await respuesta.Content.ReadAsStringAsync();
            mensaje = $"No se pudo crear el tipo de responsable. Detalle: {detalle}";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception error)
    {
        mensaje = $"Error al crear tipo de responsable: {error.Message}";
        claseAviso = "alert alert-danger";
    }
}

    private async Task ActualizarTipoResponsable()
{
    LimpiarMensajes();

    if (tiporesponsableActual.Id <= 0)
    {
        mensaje = "Debe indicar el Id para actualizar.";
        claseAviso = "alert alert-warning";
        return;
    }

    // 1. Se crea objeto que exluye 'Id' de la actualizacion.
    var datosParaActualizar = new 
    {
        Titulo = tiporesponsableActual.Titulo,
        Descripcion = tiporesponsableActual.Descripcion,
    };

    try
    {
        var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
        var ruta = $"{urlBaseApi}/id/{tiporesponsableActual.Id}";
        
        // 2. ENVIAMOS EL OBJETO DTO (SIN EL ID)
        var respuesta = await cliente.PutAsJsonAsync(ruta, datosParaActualizar);

        if (respuesta.IsSuccessStatusCode)
        {
            mensaje = "TipoResponsable actualizado correctamente.";
            claseAviso = "alert alert-success";

            await CargarTipoResponsables();

            existeTipoResponsable = true;
            textoBotonGuardar = "Actualizar";
        }
        else
        {
            var detalle = await respuesta.Content.ReadAsStringAsync();
            mensaje = $"No se pudo actualizar el tiporesponsable. Detalle: {detalle}";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception error)
    {
        mensaje = $"Error al actualizar tiporesponsable: {error.Message}";
        claseAviso = "alert alert-danger";
    }
}

    private async Task EliminarTipoResponsable()
    {
        LimpiarMensajes();

        if (tiporesponsableActual.Id <= 0)
        {
            mensaje = "Debe indicar el Id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
            var ruta = $"{urlBaseApi}/id/{tiporesponsableActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "TipoResponsable eliminado correctamente.";
                claseAviso = "alert alert-success";

                await CargarTipoResponsables();

                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el tiporesponsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar tiporesponsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // AUXILIARES
    // =============================================================================
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoResponsables");
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con tiporesponsable {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(TipoResponsableModel u)
    {
        tiporesponsableActual = new TipoResponsableModel()
        {
            Id = u.Id,
            Titulo = u.Titulo,
            Descripcion = u.Descripcion,
        };

        existeTipoResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "TipoResponsable seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tiporesponsableActual = new TipoResponsableModel();
        existeTipoResponsable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
